import networkx as nx
import matplotlib.pyplot as plt

# Створення графа транспортної мережі міста Києва

# Вершини (вузли) - станції метро
stations = [
    "Хрещатик", "Майдан Незалежності", "Золоті Ворота", "Театральна", "Палац Спорту",
    "Площа Українських Героїв", "Лісова", "Чернігівська", "Дарниця", "Лівобережна",
    "Гідропарк", "Дніпро", "Арсенальна", "Університет", "Вокзальна", "Політехнічний Інститут",
    "Шулявська", "Берестейська", "Нивки", "Святошин", "Житомирська", "АкадемМістечко",
    "Червоний Хутір", "Бориспільська", "Вирлиця", "Харківська", "Позняки", "Осокорки",
    "Славутич", "Видубичі", "Звіринецька", "Печерська", "Кловська", "Лук'янівська",
    "Дорогожичі", "Сирець", "Теремки", "Іподром", "Васильківська", "Голосіївська",
    "Деміївська", "Либідська", "Палац 'Україна'", "Олімпійська", "Поштова площа",
    "Контрактова площа", "Тараса Шевченка", "Почайна", "Оболонь", "Мінська", "Героїв Дніпра"
]

# Ребра (зв'язки) - лінії метро
edges = [
    # Червона гілка
    ("Лісова", "Чернігівська"), ("Чернігівська", "Дарниця"), ("Дарниця", "Лівобережна"),
    ("Лівобережна", "Гідропарк"), ("Гідропарк", "Дніпро"), ("Дніпро", "Арсенальна"),
    ("Арсенальна", "Хрещатик"), ("Хрещатик", "Театральна"), ("Театральна", "Університет"),
    ("Університет", "Вокзальна"), ("Вокзальна", "Політехнічний Інститут"),
    ("Політехнічний Інститут", "Шулявська"), ("Шулявська", "Берестейська"),
    ("Берестейська", "Нивки"), ("Нивки", "Святошин"), ("Святошин", "Житомирська"),
    ("Житомирська", "АкадемМістечко"),
    # Зелена гілка
    ("Червоний Хутір", "Бориспільська"), ("Бориспільська", "Вирлиця"), ("Вирлиця", "Харківська"),
    ("Харківська", "Позняки"), ("Позняки", "Осокорки"), ("Осокорки", "Славутич"),
    ("Славутич", "Видубичі"), ("Видубичі", "Звіринецька"), ("Звіринецька", "Печерська"),
    ("Печерська", "Кловська"), ("Кловська", "Палац Спорту"), ("Палац Спорту", "Золоті Ворота"),
    ("Золоті Ворота", "Лук'янівська"), ("Лук'янівська", "Дорогожичі"), ("Дорогожичі", "Сирець"),
    # Синя гілка
    ("Теремки", "Іподром"), ("Іподром", "Васильківська"), ("Васильківська", "Голосіївська"),
    ("Голосіївська", "Деміївська"), ("Деміївська", "Либідська"), ("Либідська", "Палац 'Україна'"),
    ("Палац 'Україна'", "Олімпійська"), ("Олімпійська", "Площа Українських Героїв"),
    ("Площа Українських Героїв", "Майдан Незалежності"), ("Майдан Незалежності", "Поштова площа"),
    ("Поштова площа", "Контрактова площа"), ("Контрактова площа", "Тараса Шевченка"),
    ("Тараса Шевченка", "Почайна"), ("Почайна", "Оболонь"), ("Оболонь", "Мінська"),
    ("Мінська", "Героїв Дніпра"),
    # Пересадки
    ("Майдан Незалежності", "Хрещатик"), ("Золоті Ворота", "Театральна"),
    ("Палац Спорту", "Площа Українських Героїв")
]

# Створення графа за допомогою networkX
G = nx.Graph()
G.add_nodes_from(stations)
G.add_edges_from(edges)

# Візуалізація графа з використанням кольорів
plt.figure(figsize=(12, 8))

# Визначення кольорів для кожної гілки
edge_colors = []
for edge in G.edges():
    if edge in [("Лісова", "Чернігівська"), ("Чернігівська", "Дарниця"), ("Дарниця", "Лівобережна"), 
                ("Лівобережна", "Гідропарк"), ("Гідропарк", "Дніпро"), ("Дніпро", "Арсенальна"), 
                ("Арсенальна", "Хрещатик"), ("Хрещатик", "Театральна"), ("Театральна", "Університет"), 
                ("Університет", "Вокзальна"), ("Вокзальна", "Політехнічний Інститут"), 
                ("Політехнічний Інститут", "Шулявська"), ("Шулявська", "Берестейська"), 
                ("Берестейська", "Нивки"), ("Нивки", "Святошин"), ("Святошин", "Житомирська"), 
                ("Житомирська", "АкадемМістечко")]:
        edge_colors.append('red')
    elif edge in [("Червоний Хутір", "Бориспільська"), ("Бориспільська", "Вирлиця"), 
                  ("Вирлиця", "Харківська"), ("Харківська", "Позняки"), ("Позняки", "Осокорки"), 
                  ("Осокорки", "Славутич"), ("Славутич", "Видубичі"), ("Видубичі", "Звіринецька"), 
                  ("Звіринецька", "Печерська"), ("Печерська", "Кловська"), ("Кловська", "Палац Спорту"), 
                  ("Палац Спорту", "Золоті Ворота"), ("Золоті Ворота", "Лук'янівська"), 
                  ("Лук'янівська", "Дорогожичі"), ("Дорогожичі", "Сирець")]:
        edge_colors.append('green')
    elif edge in [("Теремки", "Іподром"), ("Іподром", "Васильківська"), ("Васильківська", "Голосіївська"), 
                  ("Голосіївська", "Деміївська"), ("Деміївська", "Либідська"), ("Либідська", "Палац \"Україна\""), 
                  ("Палац \"Україна\"", "Олімпійська"), ("Олімпійська", "Площа Українських Героїв"), 
                  ("Площа Українських Героїв", "Майдан Незалежності"), ("Майдан Незалежності", "Поштова площа"), 
                  ("Поштова площа", "Контрактова площа"), ("Контрактова площа", "Тараса Шевченка"), 
                  ("Тараса Шевченка", "Почайна"), ("Почайна", "Оболонь"), ("Оболонь", "Мінська"), 
                  ("Мінська", "Героїв Дніпра")]:
        edge_colors.append('blue')
    else:
        edge_colors.append('gray')

nx.draw(G, with_labels=True, edge_color=edge_colors, node_color='skyblue', node_size=500, font_size=10)
plt.title("Транспортна мережа міста Києва (метро)")
plt.show()

# Аналіз характеристик графа
print(f"Кількість вершин: {G.number_of_nodes()}")
print(f"Кількість ребер: {G.number_of_edges()}")

# Ступінь вершин
for node in G.nodes:
    print(f"Ступінь вершини '{node}': {G.degree(node)}")


# Пошук шляху за допомогою DFS
start_node = "Хрещатик"
end_node = "Оболонь"

print(f"--- Пошук шляху DFS від '{start_node}' до '{end_node}' ---")
def dfs_path(graph, start, goal, path=[]):
    path = path + [start]
    if start == goal:
        return path
    if start not in graph:
        return None
    for node in graph[start]:
        if node not in path:
            new_path = dfs_path(graph, node, goal, path)
            if new_path:
                return new_path
    return None

path_dfs = dfs_path(nx.to_dict_of_lists(G), start_node, end_node)
print(f"Шлях DFS: {path_dfs}")

## Пошук шляху за допомогою BFS
print(f"\n--- Пошук шляху BFS від '{start_node}' до '{end_node}' ---")
def bfs_path(graph, start, goal):
    queue = [(start, [start])]
    while queue:
        (vertex, path) = queue.pop(0)
        for next in set(graph[vertex]) - set(path):
            if next == goal:
                return path + [next]
            else:
                queue.append((next, path + [next]))

path_bfs = bfs_path(nx.to_dict_of_lists(G), start_node, end_node)
print(f"Шлях BFS: {path_bfs}")

## Порівняння результатів
print(f"\n--- Порівняння результатів ---")
print(f"Шлях DFS: {path_dfs}")
print(f"Шлях BFS: {path_bfs}")

if path_dfs == path_bfs:
    print("Шляхи DFS та BFS однакові.")
else:
    print("Шляхи DFS та BFS різні.")

# Пояснення
print("\n--- Пояснення ---")
print(f"Алгоритм DFS шукає шлях, проходячи по графу в глибину, тобто спочатку досліджує всі гілки дерева, що розгалужуються з початкової вершини, перш ніж перейти до наступної гілки."
      f"Алгоритм BFS шукає шлях, проходячи по графу в ширину, тобто спочатку досліджує всіх сусідів початкової вершини, потім їхніх сусідів тощо."
      f"У цьому випадку шляхи різні, оскільки алгоритми DFS та BFS обходять граф різними способами."
      f"Шлях DFS зазвичай більш 'глибокий', а шлях BFS — більш 'широкий' і зазвичай знаходить найкоротший шлях.")
